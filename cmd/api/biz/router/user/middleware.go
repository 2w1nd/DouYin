// Code generated by hertz generator.

package User

import (
	"context"
	"github.com/DouYin/cmd/api/rpc"
	"github.com/DouYin/hertz_gen/model/hertz/user"
	user1 "github.com/DouYin/kitex_gen/user"
	"github.com/DouYin/pkg/constants"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/hertz-contrib/jwt"
	"log"
	"time"
)

var identityKey = "id"

type loginResponse struct {
	Code  int64  `json:"status_code"`
	Msg   string `json:"status_msg"`
	Uid   int64  `json:"user_id"`
	Token string `json:"token"`
}

func rootMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _userMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _loginMw() (mws []app.HandlerFunc) {
	authMiddleware, err := jwt.New(&jwt.HertzJWTMiddleware{
		Realm:            "DouYin",                       // 标识
		SigningAlgorithm: "HS256",                        // 加密算法
		Key:              []byte(constants.JWTSecretKey), // 密钥
		Timeout:          time.Hour * 24,                 // token的过期时间
		MaxRefresh:       time.Hour,                      // 刷新最大延时
		IdentityKey:      identityKey,
		PayloadFunc: func(data interface{}) jwt.MapClaims {
			if v, ok := data.(*user.User); ok {
				return jwt.MapClaims{
					identityKey: v.Id,
				}
			}
			return jwt.MapClaims{}
		},
		IdentityHandler: func(ctx context.Context, c *app.RequestContext) interface{} {
			claims := jwt.ExtractClaims(ctx, c)
			return &user.User{
				Name: claims[identityKey].(string),
			}
		},
		Authenticator: func(ctx context.Context, c *app.RequestContext) (interface{}, error) {
			var loginVals user.LoginReq
			if err := c.BindAndValidate(&loginVals); err != nil {
				return "", jwt.ErrMissingLoginValues
			}
			if uid, err := rpc.CheckUser(ctx, &user1.CheckUserRequest{Username: loginVals.Username, Password: loginVals.Password}); err == nil {
				c.Set("key", uid)
				return &user.User{
					Id: uid,
				}, nil
			}
			return nil, jwt.ErrFailedAuthentication
		},
		LoginResponse: func(ctx context.Context, c *app.RequestContext, code int, token string, time time.Time) {
			uId, _ := c.Get("key")
			c.JSON(200, loginResponse{
				Code:  200,
				Msg:   "登录成功",
				Uid:   uId.(int64),
				Token: token,
			})
		},
		TokenLookup:   "header: Authorization, query: token, cookie: jwt",
		TokenHeadName: "Bearer",
		TimeFunc:      time.Now,
	})
	if err != nil {
		log.Fatal("JWT Error:" + err.Error())
	}
	mws = append(mws, authMiddleware.MiddlewareFunc())
	return
}

func _registerMw() []app.HandlerFunc {
	// your code...
	return nil
}
