// Code generated by hertz generator.

package handler

import (
	"context"
	"github.com/DouYin/cmd/api/rpc"
	"github.com/DouYin/hertz_gen/model/hertz/user"
	user1 "github.com/DouYin/kitex_gen/user"
	"github.com/DouYin/pkg/constants"
	"github.com/DouYin/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/hertz-contrib/jwt"
	"net/http"
)

// Login .
// @router /user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var loginReq user.LoginReq
	err = c.BindAndValidate(&loginReq)
	if err != nil {
		c.String(400, err.Error())
		return
	}
	resp := new(user.LoginResp)
	c.JSON(200, resp)
}

// Register .
// @router /user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var registerVar user.RegisterReq
	err = c.BindAndValidate(&registerVar)
	if err != nil {
		c.String(400, err.Error())
		return
	}
	_, err = rpc.CreateUser(context.Background(), &user1.CreateUserRequest{
		Username: registerVar.Username,
		Password: registerVar.Password,
	})
	if err != nil {
		e := errno.ConvertErr(err)
		c.JSON(http.StatusOK, BaseResponse{
			Code: e.ErrCode,
			Msg:  e.ErrMsg,
		})
		return
	}
}

// User .
// @router /user [GET]
func User(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}
	claims := jwt.ExtractClaims(ctx, c)
	uid := int64(claims[constants.IdentityKey].(float64))
	users, err := rpc.MGetUsers(context.Background(), &user1.MGetUserRequest{
		UserId:        uid,
		TargetUserIds: []int64{req.UserId},
	})
	if err != nil {
		e := errno.ConvertErr(err)
		c.JSON(http.StatusOK, BaseResponse{
			Code: e.ErrCode,
			Msg:  e.ErrMsg,
		})
		return
	}
	if len(users) == 0 {
		e := errno.UserErr.WithMsg("user isn't exist")
		c.JSON(http.StatusOK, BaseResponse{
			Code: e.ErrCode,
			Msg:  e.ErrMsg,
		})
	}
	e := errno.Success
	resp := new(user.UserResp)
	resp = &user.UserResp{
		BaseResp: user.BaseResp{
			StatusCode: e.ErrCode,
			StatusMsg:  e.ErrMsg,
		},
		User: UserRPC2Hertz(users[0]),
	}
	c.JSON(200, resp)
}
